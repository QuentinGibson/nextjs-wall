generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  UserPostLike  UserPostLike[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id       String         @id @default(cuid())
  content  String         @db.VarChar(255)
  subject  String         @db.VarChar(255)
  likes    Int            @default(0)
  likedBy  UserPostLike[]
  authorId String
  author   User           @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model UserPostLike {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, postId])
}
